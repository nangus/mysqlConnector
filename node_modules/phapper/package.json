{
  "name": "phapper",
  "version": "0.1.7",
  "description": "PhantomJS Script wrapper for Node.",
  "main": "./lib/phapper.js",
  "scripts": {
    "install": "node install.js",
    "test": "make test"
  },
  "config": {
    "phantomjs_version": "1.9.1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:jmervine/phapper.git"
  },
  "keywords": [
    "phantomjs"
  ],
  "author": {
    "name": "Joshua Mervine",
    "email": "joshua@mervine.net",
    "url": "http://mervine.net"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/jmervine/phapper/issues"
  },
  "devDependencies": {
    "nodeunit": "~0.8.1"
  },
  "dependencies": {
    "execSync": "~1.0.1-pre"
  },
  "readme": "# Phapper\n\n[![Build Status](https://travis-ci.org/jmervine/phapper.png?branch=master)](https://travis-ci.org/jmervine/phapper) &nbsp; [![Dependancy Status](https://david-dm.org/jmervine/phapper.png)](https://david-dm.org/jmervine/phapper) &nbsp; [![NPM Version](https://badge.fury.io/js/phapper.png)](https://badge.fury.io/js/phapper)\n\n\nSimple PhantomJS Script wrapper for Node.js, which parsed JSON output from the\npassed PhantomJS script (if possible).\n\n### Links\n\n* [package](https://npmjs.org/package/phapper)\n* [source](http://github.com/jmervine/phapper)\n* [tests](https://travis-ci.org/jmervine/phapper)\n\n### Node.js Version\n\nTested on the following node versions (via [Travis-ci.org](http://travis-ci.org)):\n\n- 0.8\n- 0.10\n\n\n## Install\n\n    $ npm install phapper\n    \n> Note: On CentOS 6, I had to install the following packages:\n> - `sudo yum install freetype fontconfig`\n\n#### Additional Installation Notes\n\nYou can specify different versions of [PhantomJS](http://mervine.net/phantomjs) using `npm config`:\n\n    $ npm config set phantomjs_version\n\n> You will have to reinstall `phapper` if you change this option after initially installing it.\n\nI've added limited Windows support, in that you'll have to install [PhantomJS](http://mervine.net/phantomjs) yourself and then specify the path in your code:\n\n    :::js\n    var Phapper = require('phapper');\n    Phapper.prototype.bin = 'c:\\path\\to\\phantomjs.exe';\n\n> It's important to note that I haven't tested this on Windows (and don't really have an easy way to), so feedback and/or pull requests are welcome.\n\n\n## Usage\n\n    :::js\n    var Phapper = require('phapper');\n    var phap = new Phapper(\"/path/to/phantom/script.js\",\n                            [ \"--arg1\", \"val1\", \"--arg2\", \"arg3\" ]);\n    // Phapper also takes an Object as a third argument which can be\n    // anything you might pass to `child_process.exec`. E.g. `env`,\n    // `cwd`, etc. When using runSync, only `cwd` is supported.\n\n\n    // Note: runSync is pretty inefficent due to execSync.exec.\n    console.log(\"Run Sync\");\n    var results = phap.runSync();\n    // => results\n    // {\n    //    parsed: { parsed json from stdout || undefined },\n    //    output: \"stdout string\\nstderr string\"\n    // }\n    if (results.parsed) {\n        console.log(\"result object:\\n%j\", results.parsed);\n    } else {\n        console.log(results.output);\n    }\n\n    console.log(\"Run Async\");\n    phap.run( function (result, resultObj) {\n        // => result\n        // { parsed json from stdout || undefined }\n        // => resultObj\n        // {\n        //    stdout: \"stdout string\",\n        //    stderr: \"stderr string\"\n        //    error:  \"error string\"\n        // }\n        if (result) {\n            console.log(\"Results:\\n%j\", result);\n        }\n        console.log(\"Raw Results:\");\n        console.log(resultObj.stdout);\n        console.log(resultObj.stderr);\n        if (resultObj.error) {\n            console.error(resultObj.error);\n        }\n    });\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jmervine/phapper",
  "_id": "phapper@0.1.7",
  "_from": "phapper@~0.1.7"
}
